// ----------------------------------------------------------------------------
// SCVerify Testbench Template
//
//    HLS version: 2023.2/1059873 Production Release
//       HLS date: Mon Aug  7 10:54:31 PDT 2023
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: rijain@orw-cds-bm20
// Generated date: Sun Oct 08 11:12:39 PDT 2023
//
// ----------------------------------------------------------------------------
// 
// Place system includes here
#include <iostream>

#include "./cvs.h"
#include <mc_scverify.h>

// some functions for generating random test vectors
#include <mc_random.h>

static void throw_dice_for_inputBeverage(ac_channel<coffeeSelect > &inputBeverage) {
   coffeeSelect tmp_ac_chan_struct_inputBeverage;
   mc_random(tmp_ac_chan_struct_inputBeverage.is_select_filter_coffee);
   mc_random(tmp_ac_chan_struct_inputBeverage.is_select_black_coffee);
   mc_random(tmp_ac_chan_struct_inputBeverage.is_select_bru_coffee);
   mc_random(tmp_ac_chan_struct_inputBeverage.is_select_nescafe_coffee);
   mc_random(tmp_ac_chan_struct_inputBeverage.entered_coin);
   inputBeverage.write(tmp_ac_chan_struct_inputBeverage);
}


// some functions initializing values to zero
static void init_inputBeverage(ac_channel<coffeeSelect > &inputBeverage) {
}

static void init_green_led_ch(ac_channel<ac_int<1, false > > &green_led_ch) {
}

static void init_yellow_led_ch(ac_channel<ac_int<1, false > > &yellow_led_ch) {
}

static void init_coffee_served(ac_int<1, false > &coffee_served) {
   coffee_served = 0;
}


// -------------------------------------------
// Start of MAIN

CCS_MAIN(int argc, char *argv[])
{
   vendingSys __obj;
   // Place local testbench variables here
   ac_channel<coffeeSelect > inputBeverage;
   ac_channel<ac_int<1, false > > green_led_ch;
   ac_channel<ac_int<1, false > > yellow_led_ch;
   ac_int<1, false > coffee_served;
   
   // Initialize local variables to zero
   init_inputBeverage(inputBeverage);
   init_green_led_ch(green_led_ch);
   init_yellow_led_ch(yellow_led_ch);
   init_coffee_served(coffee_served);
   
   // Main test iterations start here
   for (int iteration = 1; iteration <= 1; ++iteration) {
      
      // Set test values for this iteration
      throw_dice_for_inputBeverage(inputBeverage);
      
      // Progress indicator
      std::cout << "Iteration: " << iteration << std::endl;
      
      // Call original function and capture data
      CCS_DESIGN(__obj.run)(inputBeverage, green_led_ch, yellow_led_ch, coffee_served);
      // Flushing ac_channel based outputs
      while (green_led_ch.available(1)) (void)green_led_ch.read();
      while (yellow_led_ch.available(1)) (void)yellow_led_ch.read();
      
   }
   // Return success
   CCS_RETURN(0);
}
